{"version":3,"file":"pumpfun.cjs","sources":["../../../src/pumpfun.ts"],"sourcesContent":["import {\n  Commitment,\n  Connection,\n  Finality,\n  Keypair,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Program, Provider } from \"@coral-xyz/anchor\";\nimport { GlobalAccount } from \"./globalAccount.js\";\nimport {\n  CompleteEvent,\n  CreateEvent,\n  CreateTokenMetadata,\n  PriorityFee,\n  PumpFunEventHandlers,\n  PumpFunEventType,\n  SetParamsEvent,\n  TradeEvent,\n  TransactionResult,\n} from \"./types.js\";\nimport {\n  toCompleteEvent,\n  toCreateEvent,\n  toSetParamsEvent,\n  toTradeEvent,\n} from \"./events.js\";\nimport {\n  createAssociatedTokenAccountInstruction,\n  getAccount,\n  getAssociatedTokenAddress,\n} from \"@solana/spl-token\";\nimport { BondingCurveAccount } from \"./bondingCurveAccount.js\";\nimport { BN } from \"bn.js\";\nimport {\n  DEFAULT_COMMITMENT,\n  DEFAULT_FINALITY,\n  calculateWithSlippageBuy,\n  calculateWithSlippageSell,\n  sendTx,\n} from \"./util.js\";\nimport { PumpFun, IDL } from \"./IDL/index.js\";\nimport { Idl } from \"@coral-xyz/anchor\";\n\n// SDK Constants\nconst MPL_TOKEN_METADATA_PROGRAM_ID = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\";\nconst SYSTEM_PROGRAM_ID = \"11111111111111111111111111111111\";\nconst TOKEN_PROGRAM_ID = \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\";\nconst ASSOCIATED_TOKEN_PROGRAM_ID = \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\";\n\nexport const GLOBAL_ACCOUNT_SEED = \"global\";\nexport const MINT_AUTHORITY_SEED = \"mint-authority\";\nexport const BONDING_CURVE_SEED = \"bonding-curve\";\nexport const METADATA_SEED = \"metadata\";\nexport const EVENT_AUTHORITY_SEED = \"__event_authority\";\n\nexport const DEFAULT_DECIMALS = 6;\n\nexport class PumpFunSDK {\n  public program: Program<Idl>;\n  public connection: Connection;\n  constructor(provider?: Provider) {\n    this.program = new Program(IDL as Idl, provider);\n    this.connection = this.program.provider.connection;\n  }\n\n  async createAndBuy (\n    creator: Keypair,\n    mint: Keypair,\n    createTokenMetadata: CreateTokenMetadata,\n    buyAmountSol: bigint,\n    slippageBasisPoints: bigint = 500n,\n    priorityFees?: PriorityFee,\n    commitment: Commitment = DEFAULT_COMMITMENT,\n    finality: Finality = DEFAULT_FINALITY\n  ): Promise<TransactionResult> {\n    let tokenMetadata = await this.createTokenMetadata(createTokenMetadata);\n\n    let createTx = await this.getCreateInstructions(\n      creator.publicKey,\n      createTokenMetadata.name,\n      createTokenMetadata.symbol,\n      tokenMetadata.metadataUri,\n      mint\n    );\n\n    let newTx = new Transaction().add(createTx);\n\n    if (buyAmountSol > 0) {\n      const globalAccount = await this.getGlobalAccount(commitment);\n      const buyAmount = globalAccount.getInitialBuyPrice(buyAmountSol);\n      const buyAmountWithSlippage = calculateWithSlippageBuy(\n        buyAmountSol,\n        slippageBasisPoints\n      );\n\n      // Instead of calling getBuyInstructions which requires an existing bonding curve,\n      // we'll create the buy instruction manually since we know the token is being created\n\n      const bondingCurvePDA = this.getBondingCurvePDA(mint.publicKey);\n      \n      const associatedBondingCurve = await getAssociatedTokenAddress(\n        mint.publicKey,\n        bondingCurvePDA,\n        true\n      );\n\n      // Create associated token account for user if needed\n      const associatedUser = await this.createAssociatedTokenAccountIfNeeded(\n        creator.publicKey,\n        creator.publicKey,\n        mint.publicKey,\n        newTx,\n        commitment\n      );\n\n      // Get event authority PDA\n      const eventAuthorityPda = this.getEventAuthorityPda();\n\n      // Get global account PDA\n      const globalAccountPDA = this.getGlobalAccountPda();\n\n      // Derive creator_vault PDA using the creator's public key (for createAndBuy, bonding curve doesn't exist yet)\n      const creatorVaultPda = this.getCreatorVaultPda(creator.publicKey);\n\n      // Create buy instruction using Anchor coder\n      const buyInstructionData = this.program.coder.instruction.encode(\"buy\", {\n        amount: new BN(buyAmount.toString()),\n        maxSolCost: new BN(buyAmountWithSlippage.toString())\n      });\n      \n      // Create accounts array in the exact order\n      const accounts = [\n        { pubkey: globalAccountPDA, isSigner: false, isWritable: false },\n        { pubkey: globalAccount.feeRecipient, isSigner: false, isWritable: true },\n        { pubkey: mint.publicKey, isSigner: false, isWritable: false },\n        { pubkey: bondingCurvePDA, isSigner: false, isWritable: true },\n        { pubkey: associatedBondingCurve, isSigner: false, isWritable: true },\n        { pubkey: associatedUser, isSigner: false, isWritable: true },\n        { pubkey: creator.publicKey, isSigner: true, isWritable: true },\n        { pubkey: new PublicKey(SYSTEM_PROGRAM_ID), isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(TOKEN_PROGRAM_ID), isSigner: false, isWritable: false },\n        { pubkey: creatorVaultPda, isSigner: false, isWritable: true },\n        { pubkey: eventAuthorityPda, isSigner: false, isWritable: false },\n        { pubkey: this.program.programId, isSigner: false, isWritable: false }\n      ];\n      \n      newTx.add(\n        new TransactionInstruction({\n          keys: accounts,\n          programId: this.program.programId,\n          data: buyInstructionData\n        })\n      );\n    }\n\n    let createResults = await sendTx(\n      this.connection,\n      newTx,\n      creator.publicKey,\n      [creator, mint],\n      priorityFees,\n      commitment,\n      finality\n    );\n    return createResults;\n  }\n\n  async buy(\n    buyer: Keypair,\n    mint: PublicKey,\n    buyAmountSol: bigint,\n    slippageBasisPoints: bigint = 500n,\n    priorityFees?: PriorityFee,\n    commitment: Commitment = DEFAULT_COMMITMENT,\n    finality: Finality = DEFAULT_FINALITY\n  ): Promise<TransactionResult> {\n    // Get bonding curve account\n    const bondingCurvePDA = this.getBondingCurvePDA(mint);\n    const bondingAccount = await this.getBondingCurveAccount(mint, commitment);\n    if (!bondingAccount) {\n      throw new Error(`Bonding curve account not found: ${mint.toBase58()}`);\n    }\n    \n    // Get global account\n    const globalAccountPDA = this.getGlobalAccountPda();\n    const globalAccount = await this.getGlobalAccount(commitment);\n    \n    // Calculate buy amount\n    const buyAmount = bondingAccount.getBuyPrice(buyAmountSol);\n    const buyAmountWithSlippage = calculateWithSlippageBuy(\n      buyAmountSol,\n      slippageBasisPoints\n    );\n    \n    // Get the associated token accounts\n    const associatedBondingCurve = await getAssociatedTokenAddress(\n      mint,\n      bondingCurvePDA,\n      true\n    );\n    \n    // Get bonding curve creator using helper function\n    const bondingCurveCreator = await this.getBondingCurveCreator(bondingCurvePDA, commitment);\n    \n    // Derive creator_vault PDA using bonding curve creator (not user public key)\n    const creatorVaultPda = this.getCreatorVaultPda(bondingCurveCreator);\n\n    // Get event authority PDA\n    const eventAuthorityPda = this.getEventAuthorityPda();\n    \n    // Create a new transaction\n    let transaction = new Transaction();\n    \n    // Add token account creation instruction if needed\n    const associatedUser = await this.createAssociatedTokenAccountIfNeeded(\n      buyer.publicKey,\n      buyer.publicKey,\n      mint,\n      transaction,\n      commitment\n    );\n    \n    // Create buy instruction using Anchor coder\n    const buyInstructionData = this.program.coder.instruction.encode(\"buy\", {\n      amount: new BN(buyAmount.toString()),\n      maxSolCost: new BN(buyAmountWithSlippage.toString())\n    });\n    \n    // Create accounts array in the exact order from buy_token_fixed.ts\n    const accounts = [\n      { pubkey: globalAccountPDA, isSigner: false, isWritable: false },\n      { pubkey: globalAccount.feeRecipient, isSigner: false, isWritable: true },\n      { pubkey: mint, isSigner: false, isWritable: false },\n      { pubkey: bondingCurvePDA, isSigner: false, isWritable: true },\n      { pubkey: associatedBondingCurve, isSigner: false, isWritable: true },\n      { pubkey: associatedUser, isSigner: false, isWritable: true },\n      { pubkey: buyer.publicKey, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(SYSTEM_PROGRAM_ID), isSigner: false, isWritable: false }, // SystemProgram\n      { pubkey: new PublicKey(TOKEN_PROGRAM_ID), isSigner: false, isWritable: false }, // TokenProgram\n      { pubkey: creatorVaultPda, isSigner: false, isWritable: true },\n      { pubkey: eventAuthorityPda, isSigner: false, isWritable: false },\n      { pubkey: this.program.programId, isSigner: false, isWritable: false }\n    ];\n    \n    // Add the buy instruction (manually created to ensure correct account order)\n    transaction.add(\n      new TransactionInstruction({\n        keys: accounts,\n        programId: this.program.programId,\n        data: buyInstructionData\n      })\n    );\n    \n    // Send the transaction\n    return await sendTx(\n      this.connection,\n      transaction,\n      buyer.publicKey,\n      [buyer],\n      priorityFees,\n      commitment,\n      finality\n    );\n  }\n\n  async sell(\n    seller: Keypair,\n    mint: PublicKey,\n    sellTokenAmount: bigint,\n    slippageBasisPoints: bigint = 500n,\n    priorityFees?: PriorityFee,\n    commitment: Commitment = DEFAULT_COMMITMENT,\n    finality: Finality = DEFAULT_FINALITY\n  ): Promise<TransactionResult> {\n    // Get bonding curve account\n    const bondingCurvePDA = this.getBondingCurvePDA(mint);\n    const bondingAccount = await this.getBondingCurveAccount(mint, commitment);\n    if (!bondingAccount) {\n      throw new Error(`Bonding curve account not found: ${mint.toBase58()}`);\n    }\n    \n    // Get global account\n    const globalAccountPDA = this.getGlobalAccountPda();\n    const globalAccount = await this.getGlobalAccount(commitment);\n    \n    // Calculate sell amount and slippage\n    // Get exact price from bonding curve\n    const minSolOutput = bondingAccount.getSellPrice(\n      sellTokenAmount,\n      globalAccount.feeBasisPoints\n    );\n    \n    // Calculate with percentage-based slippage rather than a fixed value reduction\n    let sellAmountWithSlippage = calculateWithSlippageSell(\n      minSolOutput,\n      slippageBasisPoints\n    );\n    \n    // Make sure we don't go below 1 for very small amounts\n    if (sellAmountWithSlippage < 1n) {\n      sellAmountWithSlippage = 1n;\n    }\n    \n    console.log(`Sell details: amount=${sellTokenAmount}, exactSolOutput=${minSolOutput}, withSlippage=${sellAmountWithSlippage}`);\n    \n    // Get the associated token accounts\n    const associatedBondingCurve = await getAssociatedTokenAddress(\n      mint,\n      bondingCurvePDA,\n      true\n    );\n    const sellerPublicKey = seller.publicKey;\n    const associatedUser = await getAssociatedTokenAddress(\n      mint,\n      sellerPublicKey,\n      false\n    );\n    \n    // Get bonding curve creator using helper function\n    const bondingCurveCreator = await this.getBondingCurveCreator(bondingCurvePDA, commitment);\n    \n    // Get the creator vault PDA\n    const creatorVaultPda = this.getCreatorVaultPda(bondingCurveCreator);\n    console.log(\"Creator vault PDA:\", creatorVaultPda.toString());\n\n    // Get event authority PDA\n    const eventAuthorityPda = this.getEventAuthorityPda();\n    \n    // Create a new transaction\n    let transaction = new Transaction();\n    \n    const sellInstructionData = this.program.coder.instruction.encode(\"sell\", {\n      amount: new BN(sellTokenAmount.toString()),\n      minSolOutput: new BN(sellAmountWithSlippage.toString())\n    });\n    \n    const sellAccounts = [\n      { pubkey: globalAccountPDA, isSigner: false, isWritable: false },\n      { pubkey: globalAccount.feeRecipient, isSigner: false, isWritable: true },\n      { pubkey: mint, isSigner: false, isWritable: false },\n      { pubkey: bondingCurvePDA, isSigner: false, isWritable: true },\n      { pubkey: associatedBondingCurve, isSigner: false, isWritable: true },\n      { pubkey: associatedUser, isSigner: false, isWritable: true },\n      { pubkey: sellerPublicKey, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(SYSTEM_PROGRAM_ID), isSigner: false, isWritable: false },\n      { pubkey: creatorVaultPda, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(TOKEN_PROGRAM_ID), isSigner: false, isWritable: false },\n      { pubkey: eventAuthorityPda, isSigner: false, isWritable: false },\n      { pubkey: this.program.programId, isSigner: false, isWritable: false }\n    ];\n    \n    let ix = new TransactionInstruction({\n      keys: sellAccounts,\n      programId: this.program.programId,\n      data: sellInstructionData\n    });\n    \n    transaction.add(ix);\n    \n    // Send the transaction\n    return await sendTx(\n      this.connection,\n      transaction,\n      sellerPublicKey,\n      [seller],\n      priorityFees,\n      commitment,\n      finality\n    );\n  }\n\n  //create token instructions\n  async getCreateInstructions(\n    creator: PublicKey,\n    name: string,\n    symbol: string,\n    uri: string,\n    mint: Keypair\n  ) {\n    const mplTokenMetadata = new PublicKey(MPL_TOKEN_METADATA_PROGRAM_ID);\n\n    const [metadataPDA] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(METADATA_SEED),\n        mplTokenMetadata.toBuffer(),\n        mint.publicKey.toBuffer(),\n      ],\n      mplTokenMetadata\n    );\n\n    const bondingCurvePDA = this.getBondingCurvePDA(mint.publicKey);\n\n    const associatedBondingCurve = await getAssociatedTokenAddress(\n      mint.publicKey,\n      bondingCurvePDA,\n      true\n    );\n\n    // Get mint authority PDA\n    const [mintAuthorityPDA] = PublicKey.findProgramAddressSync(\n      [Buffer.from(MINT_AUTHORITY_SEED)],\n      this.program.programId\n    );\n\n    // Get global account PDA\n    const globalAccountPDA = this.getGlobalAccountPda();\n\n    // Get event authority PDA\n    const eventAuthorityPda = this.getEventAuthorityPda();\n\n    // Create instruction manually to avoid typing issues\n    const createInstructionData = this.program.coder.instruction.encode(\"create\", {\n      name: name,\n      symbol: symbol,\n      uri: uri,\n      creator: creator\n    });\n    \n    const createAccounts = [\n      { pubkey: mint.publicKey, isSigner: true, isWritable: true },                    // mint\n      { pubkey: mintAuthorityPDA, isSigner: false, isWritable: false },               // mint_authority\n      { pubkey: bondingCurvePDA, isSigner: false, isWritable: true },                 // bonding_curve\n      { pubkey: associatedBondingCurve, isSigner: false, isWritable: true },          // associated_bonding_curve\n      { pubkey: globalAccountPDA, isSigner: false, isWritable: false },               // global\n      { pubkey: mplTokenMetadata, isSigner: false, isWritable: false },               // mpl_token_metadata\n      { pubkey: metadataPDA, isSigner: false, isWritable: true },                     // metadata\n      { pubkey: creator, isSigner: true, isWritable: true },                          // user\n      { pubkey: new PublicKey(SYSTEM_PROGRAM_ID), isSigner: false, isWritable: false }, // system_program\n      { pubkey: new PublicKey(TOKEN_PROGRAM_ID), isSigner: false, isWritable: false }, // token_program\n      { pubkey: new PublicKey(ASSOCIATED_TOKEN_PROGRAM_ID), isSigner: false, isWritable: false }, // associated_token_program\n      { pubkey: new PublicKey(\"SysvarRent111111111111111111111111111111111\"), isSigner: false, isWritable: false }, // rent\n      { pubkey: eventAuthorityPda, isSigner: false, isWritable: false },              // event_authority\n      { pubkey: this.program.programId, isSigner: false, isWritable: false }          // program\n    ];\n    \n    const createInstruction = new TransactionInstruction({\n      keys: createAccounts,\n      programId: this.program.programId,\n      data: createInstructionData\n    });\n    \n    return new Transaction().add(createInstruction);\n  }\n\n  async getBuyInstructionsBySolAmount(\n    buyer: PublicKey,\n    mint: PublicKey,\n    buyAmountSol: bigint,\n    slippageBasisPoints: bigint = 500n,\n    commitment: Commitment = DEFAULT_COMMITMENT\n  ) {\n    let bondingCurveAccount = await this.getBondingCurveAccount(\n      mint,\n      commitment\n    );\n    if (!bondingCurveAccount) {\n      throw new Error(`Bonding curve account not found: ${mint.toBase58()}`);\n    }\n\n    let buyAmount = bondingCurveAccount.getBuyPrice(buyAmountSol);\n    let buyAmountWithSlippage = calculateWithSlippageBuy(\n      buyAmountSol,\n      slippageBasisPoints\n    );\n\n    let globalAccount = await this.getGlobalAccount(commitment);\n\n    return await this.getBuyInstructions(\n      buyer,\n      mint,\n      globalAccount.feeRecipient,\n      buyAmount,\n      buyAmountWithSlippage\n    );\n  }\n\n  //buy\n  async getBuyInstructions(\n    buyer: PublicKey,\n    mint: PublicKey,\n    feeRecipient: PublicKey,\n    amount: bigint,\n    solAmount: bigint,\n    commitment: Commitment = DEFAULT_COMMITMENT\n  ) {\n    const bondingCurvePDA = this.getBondingCurvePDA(mint);\n    \n    const associatedBondingCurve = await getAssociatedTokenAddress(\n      mint,\n      bondingCurvePDA,\n      true\n    );\n\n    const associatedUser = await getAssociatedTokenAddress(mint, buyer, false);\n\n    // Get bonding curve account to extract creator\n    const bondingCurveAccountInfo2 = await this.connection.getAccountInfo(bondingCurvePDA);\n    if (!bondingCurveAccountInfo2) {\n      throw new Error(\"Bonding curve account not found\");\n    }\n    \n    // Get bonding curve creator using helper function\n    const bondingCurveCreator = await this.getBondingCurveCreator(bondingCurvePDA, commitment);\n\n    // Derive creator_vault PDA using bonding curve creator (not user public key)\n    const creatorVaultPda = this.getCreatorVaultPda(bondingCurveCreator);\n\n    // Get event authority PDA\n    const eventAuthorityPda = this.getEventAuthorityPda();\n\n    let transaction = new Transaction();\n\n    try {\n      await getAccount(this.connection, associatedUser, commitment);\n    } catch (e) {\n      transaction.add(\n        createAssociatedTokenAccountInstruction(\n          buyer,\n          associatedUser,\n          buyer,\n          mint\n        )\n      );\n    }\n\n    // Get global account PDA\n    const globalAccountPDA = this.getGlobalAccountPda();\n\n    // Create buy instruction using Anchor coder\n    const buyInstructionData = this.program.coder.instruction.encode(\"buy\", {\n      amount: new BN(amount.toString()),\n      maxSolCost: new BN(solAmount.toString())\n    });\n    \n    const buyAccounts = [\n      { pubkey: globalAccountPDA, isSigner: false, isWritable: false },\n      { pubkey: feeRecipient, isSigner: false, isWritable: true },\n      { pubkey: mint, isSigner: false, isWritable: false },\n      { pubkey: bondingCurvePDA, isSigner: false, isWritable: true },\n      { pubkey: associatedBondingCurve, isSigner: false, isWritable: true },\n      { pubkey: associatedUser, isSigner: false, isWritable: true },\n      { pubkey: buyer, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(SYSTEM_PROGRAM_ID), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(TOKEN_PROGRAM_ID), isSigner: false, isWritable: false },\n      { pubkey: creatorVaultPda, isSigner: false, isWritable: true },\n      { pubkey: eventAuthorityPda, isSigner: false, isWritable: false },\n      { pubkey: this.program.programId, isSigner: false, isWritable: false }\n    ];\n    \n    transaction.add(\n      new TransactionInstruction({\n        keys: buyAccounts,\n        programId: this.program.programId,\n        data: buyInstructionData\n      })\n    );\n\n    return transaction;\n  }\n\n  //sell\n  async getSellInstructionsByTokenAmount(\n    seller: PublicKey,\n    mint: PublicKey,\n    sellTokenAmount: bigint,\n    slippageBasisPoints: bigint = 500n,\n    commitment: Commitment = DEFAULT_COMMITMENT\n  ) {\n    let bondingCurveAccount = await this.getBondingCurveAccount(\n      mint,\n      commitment\n    );\n    if (!bondingCurveAccount) {\n      throw new Error(`Bonding curve account not found: ${mint.toBase58()}`);\n    }\n\n    let globalAccount = await this.getGlobalAccount(commitment);\n\n    // Get exact price from bonding curve\n    const minSolOutput = bondingCurveAccount.getSellPrice(\n      sellTokenAmount,\n      globalAccount.feeBasisPoints\n    );\n    \n    // Calculate with percentage-based slippage rather than a fixed value reduction\n    let sellAmountWithSlippage = calculateWithSlippageSell(\n      minSolOutput,\n      slippageBasisPoints\n    );\n    \n    // Make sure we don't go below 1 for very small amounts\n    if (sellAmountWithSlippage < 1n) {\n      sellAmountWithSlippage = 1n;\n    }\n\n    console.log(`getSellInstructionsByTokenAmount - amount=${sellTokenAmount}, exactOutput=${minSolOutput}, withSlippage=${sellAmountWithSlippage}`);\n\n    return await this.getSellInstructions(\n      seller,\n      mint,\n      globalAccount.feeRecipient,\n      sellTokenAmount,\n      sellAmountWithSlippage\n    );\n  }\n\n  async getSellInstructions(\n    seller: PublicKey,\n    mint: PublicKey,\n    feeRecipient: PublicKey,\n    amount: bigint,\n    minSolOutput: bigint,\n    commitment: Commitment = DEFAULT_COMMITMENT\n  ) {\n    const bondingCurvePDA = this.getBondingCurvePDA(mint);\n    \n    const associatedBondingCurve = await getAssociatedTokenAddress(\n      mint,\n      bondingCurvePDA,\n      true\n    );\n\n    const associatedUser = await getAssociatedTokenAddress(mint, seller, false);\n\n    let transaction = new Transaction();\n\n    // Get global account PDA\n    const globalAccountPDA = this.getGlobalAccountPda();\n\n    const bondingCurveCreator = await this.getBondingCurveCreator(bondingCurvePDA, commitment);\n    \n    // Derive creator_vault PDA using bonding curve creator\n    const creatorVaultPda = this.getCreatorVaultPda(bondingCurveCreator);\n\n    // Get event authority PDA\n    const eventAuthorityPda = this.getEventAuthorityPda();\n\n    // Check IDL for the correct order of accounts\n    const accounts = [\n      { pubkey: globalAccountPDA, isSigner: false, isWritable: false },\n      { pubkey: feeRecipient, isSigner: false, isWritable: true },\n      { pubkey: mint, isSigner: false, isWritable: false },\n      { pubkey: bondingCurvePDA, isSigner: false, isWritable: true },\n      { pubkey: associatedBondingCurve, isSigner: false, isWritable: true },\n      { pubkey: associatedUser, isSigner: false, isWritable: true },\n      { pubkey: seller, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(SYSTEM_PROGRAM_ID), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ASSOCIATED_TOKEN_PROGRAM_ID), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(TOKEN_PROGRAM_ID), isSigner: false, isWritable: false },\n      { pubkey: creatorVaultPda, isSigner: false, isWritable: true },\n      { pubkey: eventAuthorityPda, isSigner: false, isWritable: false },\n      { pubkey: this.program.programId, isSigner: false, isWritable: false }\n    ];\n\n    // Create the sell instruction with BN values for amount and minSolOutput\n    const instructionData = this.program.coder.instruction.encode(\"sell\", {\n      amount: new BN(amount.toString()),\n      minSolOutput: new BN(minSolOutput.toString())\n    });\n\n    // Add the instruction to the transaction\n    transaction.add(\n      new TransactionInstruction({\n        keys: accounts,\n        programId: this.program.programId,\n        data: instructionData\n      })\n    );\n\n    return transaction;\n  }\n\n  async getBondingCurveAccount(\n    mint: PublicKey,\n    commitment: Commitment = DEFAULT_COMMITMENT\n  ) {\n    const tokenAccount = await this.connection.getAccountInfo(\n      this.getBondingCurvePDA(mint),\n      commitment\n    );\n    if (!tokenAccount) {\n      return null;\n    }\n    return BondingCurveAccount.fromBuffer(tokenAccount!.data);\n  }\n\n  async getGlobalAccount(commitment: Commitment = DEFAULT_COMMITMENT) {\n    const globalAccountPDA = this.getGlobalAccountPda();\n\n    const tokenAccount = await this.connection.getAccountInfo(\n      globalAccountPDA,\n      commitment\n    );\n\n    return GlobalAccount.fromBuffer(tokenAccount!.data);\n  }\n\n  getBondingCurvePDA(mint: PublicKey) {\n    return PublicKey.findProgramAddressSync(\n      [Buffer.from(BONDING_CURVE_SEED), mint.toBuffer()],\n      this.program.programId\n    )[0];\n  }\n\n  private async getBondingCurveCreator(\n    bondingCurvePDA: PublicKey,\n    commitment: Commitment = DEFAULT_COMMITMENT\n  ): Promise<PublicKey> {\n    const bondingAccountInfo = await this.connection.getAccountInfo(bondingCurvePDA, commitment);\n    if (!bondingAccountInfo) {\n      throw new Error(\"Bonding curve account not found\");\n    }\n\n    // Creator is at offset 49 (after 8 bytes discriminator, 5 u64 fields, and 1 byte boolean)\n    const creatorBytes = bondingAccountInfo.data.subarray(49, 49 + 32);\n    return new PublicKey(creatorBytes);\n  }\n\n  async createTokenMetadata(create: CreateTokenMetadata) {\n    // Validate file\n    if (!(create.file instanceof Blob)) {\n        throw new Error('File must be a Blob or File object');\n    }\n\n    let formData = new FormData();\n    formData.append(\"file\", create.file, 'image.png'); // Add filename\n    formData.append(\"name\", create.name);\n    formData.append(\"symbol\", create.symbol);\n    formData.append(\"description\", create.description);\n    formData.append(\"twitter\", create.twitter || \"\");\n    formData.append(\"telegram\", create.telegram || \"\");\n    formData.append(\"website\", create.website || \"\");\n    formData.append(\"showName\", \"true\");\n\n    try {\n        const request = await fetch(\"https://pump.fun/api/ipfs\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n            },\n            body: formData,\n            credentials: 'same-origin'\n        });\n\n        if (request.status === 500) {\n            // Try to get more error details\n            const errorText = await request.text();\n            throw new Error(`Server error (500): ${errorText || 'No error details available'}`);\n        }\n\n        if (!request.ok) {\n            throw new Error(`HTTP error! status: ${request.status}`);\n        }\n\n        const responseText = await request.text();\n        if (!responseText) {\n            throw new Error('Empty response received from server');\n        }\n\n        try {\n            return JSON.parse(responseText);\n        } catch (e) {\n            throw new Error(`Invalid JSON response: ${responseText}`);\n        }\n    } catch (error) {\n        console.error('Error in createTokenMetadata:', error);\n        throw error;\n    }\n  }\n\n\n  private getCreatorVaultPda(creator: PublicKey): PublicKey {\n    return PublicKey.findProgramAddressSync(\n      [Buffer.from(\"creator-vault\"), creator.toBuffer()],\n      this.program.programId\n    )[0];\n  }\n\n  private getGlobalAccountPda(): PublicKey {\n    return PublicKey.findProgramAddressSync(\n      [Buffer.from(GLOBAL_ACCOUNT_SEED)],\n      this.program.programId\n    )[0];\n  }\n\n  private getEventAuthorityPda(): PublicKey {\n    return PublicKey.findProgramAddressSync(\n      [Buffer.from(EVENT_AUTHORITY_SEED)],\n      this.program.programId\n    )[0];\n  }\n\n  private async createAssociatedTokenAccountIfNeeded(\n    payer: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    transaction: Transaction,\n    commitment: Commitment = DEFAULT_COMMITMENT\n  ): Promise<PublicKey> {\n    const associatedTokenAccount = await getAssociatedTokenAddress(mint, owner, false);\n    \n    try {\n      await getAccount(this.connection, associatedTokenAccount, commitment);\n    } catch (e) {\n      transaction.add(\n        createAssociatedTokenAccountInstruction(\n          payer,\n          associatedTokenAccount,\n          owner,\n          mint\n        )\n      );\n    }\n    \n    return associatedTokenAccount;\n  }\n  //EVENTS\n  addEventListener<T extends PumpFunEventType>(\n    eventType: T,\n    callback: (\n      event: PumpFunEventHandlers[T],\n      slot: number,\n      signature: string\n    ) => void\n  ) {\n    return this.program.addEventListener(\n      eventType,\n      (event: any, slot: number, signature: string) => {\n        let processedEvent;\n        switch (eventType) {\n          case \"createEvent\":\n            processedEvent = toCreateEvent(event as CreateEvent);\n            callback(\n              processedEvent as PumpFunEventHandlers[T],\n              slot,\n              signature\n            );\n            break;\n          case \"tradeEvent\":\n            processedEvent = toTradeEvent(event as TradeEvent);\n            callback(\n              processedEvent as PumpFunEventHandlers[T],\n              slot,\n              signature\n            );\n            break;\n          case \"completeEvent\":\n            processedEvent = toCompleteEvent(event as CompleteEvent);\n            callback(\n              processedEvent as PumpFunEventHandlers[T],\n              slot,\n              signature\n            );\n            break;\n          case \"setParamsEvent\":\n            processedEvent = toSetParamsEvent(event as SetParamsEvent);\n            callback(\n              processedEvent as PumpFunEventHandlers[T],\n              slot,\n              signature\n            );\n            break;\n          default:\n            console.error(\"Unhandled event type:\", eventType);\n        }\n      }\n    );\n  }\n\n  removeEventListener(eventId: number) {\n    this.program.removeEventListener(eventId);\n  }\n\n}\n"],"names":["Program","IDL","DEFAULT_COMMITMENT","DEFAULT_FINALITY","Transaction","calculateWithSlippageBuy","getAssociatedTokenAddress","BN","PublicKey","TransactionInstruction","sendTx","calculateWithSlippageSell","getAccount","createAssociatedTokenAccountInstruction","BondingCurveAccount","GlobalAccount","toCreateEvent","toTradeEvent","toCompleteEvent","toSetParamsEvent"],"mappings":"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"}